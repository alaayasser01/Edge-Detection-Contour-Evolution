import numpy as np
from math import fabs, sqrt, ceil, atan2, pi

def hough_ellipse_manual(img,threshold=4,min_size=4,maxsize=None, accuracy=1):
    # edge img , votes threshold for acc , min legnth for major axis , max length for minor axis
        if img.ndim != 2:
            raise ValueError('The input image must be 2D.')
        bin_size = accuracy * accuracy
        maxsize=np.round(0.5 * img.shape[0]) 
        max_b_squared = maxsize * maxsize
        pixels = np.row_stack(np.nonzero(img)) # get edge pixels// possible ellipse points
        num_pixels = pixels.shape[1]
        results=[]
        acc=[]
        for p1 in range(num_pixels):
            p1x = pixels[1, p1]
            p1y = pixels[0, p1]

            for p2 in range(p1):
                p2x = pixels[1, p2]
                p2y = pixels[0, p2]

                # Candidate: center (xc, yc) and main axis a
                dx = p1x - p2x
                dy = p1y - p2y
                a = 0.5 * sqrt(dx * dx + dy * dy)
                if a > 0.5 * min_size:
                    xc = 0.5 * (p1x + p2x)
                    yc = 0.5 * (p1y + p2y)

                    for p3 in range(num_pixels):
                        p3x = pixels[1, p3]
                        p3y = pixels[0, p3]
                        dx = p3x - xc
                        dy = p3y - yc
                        d = sqrt(dx * dx + dy * dy)
                        if d > min_size:
                            dx = p3x - p1x
                            dy = p3y - p1y
                            cos_tau_squared = ((a*a + d*d - dx*dx - dy*dy)
                                               / (2 * a * d))
                            cos_tau_squared *= cos_tau_squared
                            # Consider b2 > 0 and avoid division by zero
                            k = a*a - d*d * cos_tau_squared
                            if k > 0 and cos_tau_squared < 1:
                                b_squared = a*a * d*d * (1 - cos_tau_squared) / k
                                # b2 range is limited to avoid histogram memory
                                # overflow
                                if b_squared <= max_b_squared:
                                    acc.append(b_squared)
                    if len(acc) > 0:
                        bins = np.arange(0, np.max(acc)+ bin_size, bin_size)
                        hist, bin_edges = np.histogram(acc, bins=bins)
                        hist_max = np.max(hist)
                        if hist_max > threshold:
                            orientation = atan2(p1x - p2x, p1y - p2y)
                            b = sqrt(bin_edges[hist.argmax()])
                            # to keep ellipse_perimeter() convention
                            if orientation != 0:
                                orientation = pi - orientation
                                # When orientation is not in [-pi:pi]
                                # it would mean in ellipse_perimeter()
                                # that a < b. But we keep a > b.
                                if orientation > pi:
                                    orientation = orientation - pi / 2.
                                    a, b = b, a
                            results.append((
                                            yc, xc,
                                            a, b,
                                            orientation))
                        acc = []                

        return np.array(results, dtype=[
                                    ('yc', np.float64),
                                    ('xc', np.float64),
                                    ('a', np.float64),
                                    ('b', np.float64),
                                    ('orientation', np.float64)])
